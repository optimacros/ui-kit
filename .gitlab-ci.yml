variables:
  runner: "ui-kit"
  GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_PIPELINE_ID/$CI_COMMIT_SHORT_SHA"
  GIT_STRATEGY: fetch
  GIT_FETCH_EXTRA_FLAGS: --tags --depth=1000
  DEPLOY_HOSTNAME: $DEPLOY_HOSTNAME_storybook_optimacros_com
  DEPLOY_USERNAME: $DEPLOY_USERNAME_storybook_optimacros_com

workflow:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event") # При MR
      variables:
        pr: "true"
    - if: ($CI_COMMIT_REF_NAME =~ /^release\//) # любая ветка, начинающаяся с release/
      variables:
        deploy: "true"
        pushNexus: "true"
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+(-[a-zA-Z0-9]+)?$/  # при запуске для тегов
      variables:
        pushNexus: "true"
    - if: ($CI_PIPELINE_SOURCE == "web") # при ручном запуске из webui
    - when: always
stages:
  - release

create_release_branch:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+(-[a-zA-Z0-9]+)?$/
    - when: always
  script:
    - echo "создаю ветку release/${CI_COMMIT_TAG} из тега ${CI_COMMIT_TAG}"
    - echo "git remote set-url origin https://${CI_PUSH_USER}:${CI_PUSH_TOKEN}@${CI_PROJECT_URL#https://}"
    - git remote set-url origin "https://${CI_PUSH_USER}:${CI_PUSH_TOKEN}@${CI_PROJECT_URL#https://}"
    - git fetch --tags --prune || true
    - if git show-ref --verify --quiet "refs/heads/release/${CI_COMMIT_TAG}"; then
        echo "ветка release/${CI_COMMIT_TAG} уже существует. пропускаем создание.";
      else
        git checkout -b "release/${CI_COMMIT_TAG}" "${CI_COMMIT_TAG}";
        git push origin "release/${CI_COMMIT_TAG}";
      fi
  tags:
    - ${runner}
