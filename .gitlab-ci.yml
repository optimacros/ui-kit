variables:
  runner: "ui-kit"
  GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_PIPELINE_ID/$CI_COMMIT_SHORT_SHA"
  GIT_STRATEGY: fetch
  GIT_FETCH_EXTRA_FLAGS: --tags --depth=1000
  DEPLOY_HOSTNAME: $DEPLOY_HOSTNAME_storybook_optimacros_com
  DEPLOY_USERNAME: $DEPLOY_USERNAME_storybook_optimacros_com

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      variables:
        deploy: "true"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        pr: "true"
    - if: $CI_PIPELINE_SOURCE == "web"

stages:
  - build
  - lint
  - typescript-test
  - storybook-test
  - publish
  - deploy

# Build UI packages
build-ui:
  stage: build
  script:
    - echo "legacy-peer-deps=true" >> .npmrc
    - nvm use && npm ci
    - npm run build:ui
  tags:
    - ${runner}

# Linting
lint:
  stage: lint
  variables:
    GIT_STRATEGY: none
  tags:
    - ${runner}
  script:
    - nvm use && npm run lint

# TypeScript Check
typescript:
  stage: typescript-test
  variables:
    GIT_STRATEGY: none
  tags:
    - ${runner}
  script:
    - nvm use && npm run type:check

# Storybook Test
storybook:
  stage: storybook-test
  variables:
    GIT_STRATEGY: none
  tags:
    - ${runner}
  script:
    - nvm use && npm run build:storybook

# Publish to Nexus
nexus-publish:
  stage: publish
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  needs:
    - build-ui
    - lint
    - typescript
    - storybook
  tags:
    - ${runner}
  script:
    - echo "//${NEXUS_URL}/repository/${NEXUS_REPO}/:_authToken=${NEXUS_TOKEN}" >> ~/.npmrc
    - echo "@optimacros:registry=https://${NEXUS_URL}/repository/${NEXUS_REPO}/" >> ~/.npmrc
    - nvm use && npm ci
    - npx lerna publish --yes --no-push --no-git-tag-version --conventional-commits

# Deploy Storybook
deploy-storybook:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: on_success
  needs:
    - nexus-publish
  tags:
    - ${runner}
  before_script:
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo $DEPLOY_SSH_KEY | base64 --decode | tr -d '\r' | ssh-add -
    - ssh-keyscan $DEPLOY_HOSTNAME >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying Storybook..."
    - scp storybook-static.tar.gz $DEPLOY_USERNAME@$DEPLOY_HOSTNAME:/opt/ax/ui-kit
    - ssh $DEPLOY_USERNAME@$DEPLOY_HOSTNAME "cd /opt/ax/ui-kit && rm -rf storybook-static && tar -xvf storybook-static.tar.gz && rm storybook-static.tar.gz"
